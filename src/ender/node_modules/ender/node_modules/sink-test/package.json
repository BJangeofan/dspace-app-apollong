{
  "name": "sink-test",
  "description": "Headless / Browser JavaScript Unit Tester",
  "version": "1.0.2",
  "author": {
    "name": "Dustin Diaz",
    "email": "polvero@gmail.com",
    "url": "http://dustindiaz.com"
  },
  "contributors": [
    {
      "name": "Rod Vagg",
      "email": "rod@vagg.org",
      "url": "http://github.com/rvagg"
    }
  ],
  "keywords": [
    "testing",
    "unit tests",
    "headless",
    "tdd",
    "async"
  ],
  "main": "./src/sink.js",
  "engines": {
    "node": ">= 0.4.0"
  },
  "dependencies": {
    "colors": ">= 0.5.0"
  },
  "readme": "Sink Test\n---------\n\nAn Asynchronous JavaScript Unit Testing Framework designed to run headless, or in the browser.\n\nSink test is used to test JavaScript that is run asynchronously whereby you can specify the number of expectations and Sink will tell you if they each pass successfully or call an optional `complete()` callback to indicate test completion.\n\nHow to write a Sink test\n------------------------\n\n``` js\ntest('should have foo', 2, function() {\n  $.ajax('/foo', function(resp) {\n    ok(resp.stat == '200')\n    assert(resp.text, 'success', 'should have success')\n  })\n})\n\n// alternatively:\n\ntest('should have foo', function(complete) {\n  $.ajax('/foo', function(resp) {\n    ok(resp.stat == '200')\n    assert(resp.text, 'success', 'should have success')\n    complete()\n  })\n})\n```\n\nLoading a suite of tests\n------------------------\n\nThe above example illustrates the basic syntax of a single test, however loading your tests is done via the *sink* module which exports the test and ok methods. See the example below:\n\n``` js\nsink('my module', function(test, ok, before, after, assert) {\n  before(function () {\n    // run this before every test\n  })\n\n  after(function () {\n    // run this after every test\n  })\n\n  test('should have foo', 2, function () {\n    ok(true, 'this is basically true')\n    ok(1 == 1, 'also true for you math majors')\n  })\n})\n\nsink('another module', function (t, o, b, a) {\n  test('a failure', 1, function () {\n    ok(1 == 2, 'should fail')\n  })\n})\n\nstart() // start all test modules\n```\n\nBrowser support\n---------------\n\nAny browser that supports JavaScript as well as Headless via command line with Node. (see below)\n\n``` js\n// tests.js\nvar sink = require('sink')\nvar start = sink.start\nsink = sink.sink\n\nsink('some module', function (test, ok) {\n  // write tests\n})\n\nsink('another module', function (test, ok) {\n  // write tests\n})\n\nstart()\n```\n\nin your terminal\n\n    $ node path/to/my/tests.js\n\n\nAdvanced assertion support\n--------------------------\n\nSink Test follows most of the assert module specified in the [CommonJS Unit-Testing/1.0 assert module](http://wiki.commonjs.org/wiki/Unit_Testing/1.0) and gives you additional convenience assertions plus an API to define your own assertions.\n\nBasic assert calls perform a strict equals:\n\n``` js\nassert(actual, expected, message); // performs: actual === expected\n```\n\nThe `assert` method is extended, giving you aliases for the above:\n\n``` js\nassert.same(actual, expected, message);\nassert.strictEqual(actual, expected, message);\n// and the inverse:\nassert.notSame(actual, expected, message);\nassert.notStrictEqual(actual, expected, message);\n```\n\nAnd also an alias for the simple boolean `ok` method:\n\n``` js\nassert.ok(value, message)\n```\n\nA non-strict deep equals is available via:\n\n``` js\nassert.equals(actual, expected, message);\nassert.deepEqual(actual, expected, message);\n// and the inverse:\nassert.notEqual(actual, expected, message);\n```\n\nAnd many additional assertions to make your tests clear and obvious:\n\n``` js\nassert.typeOf(value, type, message); // performs a \"typeof value == type\"\nassert.notTypeOf(value, type, message);\nassert.isDefined(value, message);\nassert.isUndefined(value, message);\nassert.isNull(value, message);\nassert.isNotNull(value, message);\nassert.isObject(value, message);\nassert.isFunction(value, message);\nassert.isString(value, message);\nassert.isNumber(value, message);\nassert.isTrue(value, message);\nassert.isFalse(value, message);\nassert.isBoolean(value, message);\nassert.isArray(value, message);\nassert.isElement(value, message); // is the value a DOM element\n```\n\nThe *message* parameter on all assertions is optional.\n\n### Custom assertions\n\nWhen you have a complex condition to assert, you can define a custom assertion for it with the `assert.add()` method.\n\nSimply provide your assertion name and the handler function. Handler functions can take one or two arguments:\n\n``` js\n// single-argument form:\nassert.add('isUpperCaseString', function (value) {\n  return typeof value == 'string' && value.toUpperCase() === value;\n});\n// use it:\nassert.isUpperCaseString('this will fail', 'should be an upper-case string'); // →  fail\nassert.isUpperCaseString('THIS WILL PASS', 'should be an upper-case string'); // →  pass\n\n// dual-argument form:\nassert.add('matchesRegex', function (actual, regex) {\n  return typeof actual == 'string' && regex.test(actual);\n});\n// use it:\nassert.matchesRegex('this will pass', / [wil]+ /, 'should match my \" [wil]+ \" regex');\n```\n\n\nHappy testing!\n",
  "readmeFilename": "README.md",
  "_id": "sink-test@1.0.2",
  "dist": {
    "shasum": "f121ff2604b1c94abeb052d8eeb1d6c2bb87617c"
  },
  "_from": "sink-test@1.0.2"
}
